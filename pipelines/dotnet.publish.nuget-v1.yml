parameters:
- name: BuildConfiguration
  type: string
  default: release
- name: buildLogFile
  type: string
  default: buildLog.log
- name: NuGetServerFeedUrl
  type: string
  default: $(NuGetServerFeedUrl)
- name: NuGetServerApiKey
  type: string
  default: $(NuGetServerApiKey)
- name: ProdBranch
  type: string
  default: refs/heads/master #default is set for GitHubFlow branching strategy
- name: CoverageInclude
  type: string
  default: '*'
- name: githubConnection
  type: string
  default: ''
- name: runTests
  type: boolean
  default: true

steps:
- checkout: self
  persistCredentials: true #persist credentials because we need to push a git tag back into the repo

- task: NuGetAuthenticate@0 #run nuget auth to allow access to private azure artifact feed
  condition: contains(variables['NuGetServerFeedUrl'], 'pkgs.dev.azure.com')

- pwsh: |
    #dotnet tool update -g GitVersion.Tool
    GitVersion $(Build.SourcesDirectory) /output buildserver /nofetch
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  displayName: GitVersion (Windows)

- bash: |
    dotnet tool update -g GitVersion.Tool
    $HOME/.dotnet/tools/dotnet-gitversion $(Build.SourcesDirectory) /output buildserver /nofetch
  condition: eq(variables['Agent.OS'], 'Linux')
  displayName: GitVersion (Linux)

- pwsh: Write-Host "##vso[Build.UpdateBuildNumber]$(GitVersion.NuGetVersion)"
  displayName: Build.UpdateBuildNumber

- pwsh: Write-Host "##vso[Build.AddBuildTag]$(GitVersion.NuGetVersion)"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], '${{ parameters.ProdBranch }}'))
  displayName: Build.AddBuildTag

- pwsh: |
    git tag $(GitVersion.NuGetVersion)
    git push origin --tags
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], '${{ parameters.ProdBranch }}'))
  displayName: git tag

- task: UseDotNet@2
  displayName: .NET Core 3.1.x SDK
  inputs:
    version: 3.1.x

- task: UseDotNet@2
  displayName: .NET 5.x SDK
  inputs:
    version: 5.x
    #includePreviewVersions: true

# - pwsh: dotnet --list-sdks
#   displayName: dotnet --list-sdks

- pwsh: dotnet restore --verbosity minimal --configfile nuget.config
  displayName: dotnet restore

# - task: DotNetCoreCLI@2
#   displayName: dotnet restore
#   inputs:
#     command: restore
#     projects: azdo-pipelines-yaml-nuget.sln
#     feedsToUse: config
#     nugetConfigPath: nuget.config
#     verbosityRestore: minimal

- pwsh: dotnet build --no-restore --nologo -p:Version='$(GitVersion.NuGetVersion)' -p:SourceRevisionId=$(Build.SourceVersion) -c ${{ parameters.BuildConfiguration }} /flp:v=q /flp:logfile=${{ parameters.buildLogFile }}
  displayName: dotnet build

- template: ../templates/steps.dotnet.warnings-v1.yml
  parameters:
    buildLogFile: ${{ parameters.buildLogFile }}

# - task: DotNetCoreCLI@2
#   displayName: dotnet build
#   enabled: ${{ eq(parameters.BuildMechanism, 'task') }}
#   inputs:
#     command: build
#     projects: azdo-pipelines-yaml-nuget.sln
#     arguments: --no-restore --nologo -c ${{ parameters.BuildConfiguration }}
#     versioningScheme: byEnvVar
#     versionEnvVar: GitVersion.NuGetVersion

- pwsh: dotnet test --no-restore --nologo --no-build -c ${{ parameters.BuildConfiguration }} -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura #-p:Include="${{ parameters.CoverageInclude}}"
  enabled: ${{ parameters.runTests }}
#- pwsh: dotnet test --nologo -c ${{ parameters.BuildConfiguration }} --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
#- pwsh: dotnet test --nologo -c ${{ parameters.BuildConfiguration }} --no-build --collect:"XPlat Code Coverage"
  displayName: dotnet test

- pwsh: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/src/*.Tests/coverage.*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage '-reporttypes:HtmlInline_AzurePipelines;Cobertura'
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  enabled: ${{ parameters.runTests }}
  displayName: reportgenerator (Windows)
  
- bash: |
    dotnet tool update -g dotnet-reportgenerator-globaltool
    cd $HOME/.dotnet/tools
    ls -lsa
    $HOME/.dotnet/tools/reportgenerator '-reports:$(Build.SourcesDirectory)/src/*.Tests/coverage.*.cobertura.xml' -targetdir:$(Build.SourcesDirectory)/CodeCoverage '-reporttypes:HtmlInline_AzurePipelines;Cobertura'
  condition: eq(variables['Agent.OS'], 'Linux')
  enabled: ${{ parameters.runTests }}
  displayName: reportgenerator (Linux)

- task: PublishCodeCoverageResults@1
  enabled: ${{ parameters.runTests }}
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/CodeCoverage/

- pwsh: dotnet pack --nologo -c ${{ parameters.BuildConfiguration }} --no-build --include-symbols -o $(Build.ArtifactStagingDirectory) -p:Version='$(GitVersion.NuGetVersion)'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: dotnet pack

- task: CopyFiles@2
  inputs:
    Contents: |
      *.nupkg
      *.snupkg
    targetFolder: $(Build.ArtifactStagingDirectory)

- publish: $(Build.ArtifactStagingDirectory)

- pwsh: dotnet nuget push $(Build.ArtifactStagingDirectory)/**/*.nupkg --skip-duplicate -s $(NuGetServerFeedUrl) --api-key $(NuGetServerApiKey)
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], '${{ parameters.ProdBranch }}'), and(ne(variables['Build.SourceBranch'], '${{ parameters.ProdBranch }}'), ne(variables['Build.Reason'], 'PullRequest'))))
  displayName: dotnet nuget push

- task: GithubRelease@0
  enabled: ${{ ne(parameters.githubConnection, '') }}
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], '${{ parameters.ProdBranch }}')) #, not(contains(variables['NuGetServerFeedUrl'], 'pkgs.dev.azure.com'))
  inputs:
    githubConnection: ${{ parameters.githubConnection }}
    action: create
    tag: $(GitVersion.NuGetVersion)