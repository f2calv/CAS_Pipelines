parameters:
- name: azureSubscription
  type: string
  default: $(azureSubscription)
- name: repositoryFolder
  type: string
  default: $(repositoryFolder)
- name: repository
  type: string
  default: $(repository)
- name: registry
  type: string
  default: $(registry)
- name: PushTagBuildNumber
  type: boolean
  default: $(PushTagBuildNumber)
- name: PushTagLatest
  type: boolean
  default: $(PushTagLatest)
- name: Dockerfile
  type: string
  default: Dockerfile
- name: tag
  type: string
  default: $(Build.BuildNumber)
- name: acrName
  type: string
  default: $(acrName)
- name: diveAnalysis
  type: boolean
  default: false

steps:
- template: parameter-check-v1.yml
  parameters:
    Name: repositoryFolder
    Value: ${{ parameters.repositoryFolder }}

- template: parameter-check-v1.yml
  parameters:
    Name: repository
    Value: ${{ parameters.repository }}

- template: parameter-check-v1.yml
  parameters:
    Name: registry
    Value: ${{ parameters.registry }}

- template: parameter-check-v1.yml
  parameters:
    Name: PushTagBuildNumber
    Value: ${{ parameters.PushTagBuildNumber }}

- template: parameter-check-v1.yml
  parameters:
    Name: PushTagLatest
    Value: ${{ parameters.PushTagLatest }}

#for custom agent KubernetesAgents (deprecated)
#- task: DockerInstaller@0
#  displayName: 'Docker Installer'
#  inputs:
#    dockerVersion: 17.09.0-ce
#    releaseType: stable

#- task: Docker@2
#  displayName: 'Build and Push image ${{ parameters.repository }}:${{ parameters.tag }}'
#  inputs:
#    containerRegistry: ${{ parameters.registry}}
#    repository: ${{ parameters.repository }}
#    command: buildAndPush
#    Dockerfile: ${{ parameters.repositoryFolder}}/${{ parameters.Dockerfile }}
#    tags: ${{ parameters.tag }}

#Note: login to ACR is needed when building from base images held within ACR, and of course to push the resultant image!
- task: Docker@2
  displayName: Login to ACR
  enabled: false #now we use the AzureCLI task
  inputs:
    command: login
    containerRegistry: ${{ parameters.acrName }}

- task: AzureCLI@2
  displayName: az acr login -n ${{ parameters.acrName }}
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: az acr login -n ${{ parameters.acrName }}
    failOnStandardError: true

- task: Docker@1
  displayName: 'docker build ${{ parameters.repository }}:${{ parameters.tag }}'
  enabled: false #now we use the simpler pwsh task
  inputs:
    imageName: '${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.tag }}'
    command: build
    dockerFile: ${{ parameters.repositoryFolder }}/${{ parameters.Dockerfile }}
    useDefaultContext: false
    addDefaultLabels: false #false enables image caching when building on a self-hosted agent
    #--pull fails when using an agent-only build image
    #arguments: --pull --build-arg ARTIFACTS_ENDPOINT=$(ARTIFACTS_ENDPOINT) --build-arg ARTIFACTS_PAT=$(ARTIFACTS_PAT)
    arguments: --build-arg ARTIFACTS_ENDPOINT=$(ARTIFACTS_ENDPOINT) --build-arg ARTIFACTS_PAT=$(ARTIFACTS_PAT)

- pwsh: |
    docker build -t ${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.Tag }} `
      -f ${{ parameters.repositoryFolder }}/${{ parameters.Dockerfile }} `
      --build-arg ARTIFACTS_ENDPOINT=$(ARTIFACTS_ENDPOINT) `
      --build-arg ARTIFACTS_PAT=$(ARTIFACTS_PAT) `
      .
  displayName: 'docker build ${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.Tag }}'
  failOnStderr: true

- pwsh: |
    dive ${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.Tag }}
  enabled: ${{ parameters.diveAnalysis }}
  displayName: dive ${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.Tag }} #CI=true is set inside custom build agent image
  failOnStderr: true

- pwsh: |
    docker tag ${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.Tag }} `
      ${{ parameters.registry }}/${{ parameters.repository }}:latest
  displayName: 'docker tag ${{ parameters.registry }}/${{ parameters.repository }}:latest'
  failOnStderr: true

- task: Docker@1
  displayName: 'docker push (1 of 2) ${{ parameters.repository }}:${{ parameters.tag }}'
  enabled: false #now we use the simpler pwsh task
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.azureSubscription }}
    azureContainerRegistry: ${{ parameters.registry }}
    imageName: '${{ parameters.repository }}:${{ parameters.tag }}'
    command: push

- pwsh: |
    docker push ${{ parameters.registry }}/${{ parameters.repository }}:${{ parameters.Tag }}
  displayName: 'docker push (1 of 2) ${{ parameters.repository }}:${{ parameters.tag }}'
  enabled: ${{ parameters.PushTagBuildNumber }}
  failOnStderr: true

- task: Docker@1
  displayName: 'docker push (2 of 2) ${{ parameters.repository }}:latest'
  enabled: false #now we use the simpler pwsh task
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.azureSubscription }}
    azureContainerRegistry: ${{ parameters.registry }}
    imageName: '${{ parameters.repository }}:latest'
    command: push

- pwsh: |
    docker push ${{ parameters.registry }}/${{ parameters.repository }}:latest
  displayName: 'docker push (2 of 2) ${{ parameters.repository }}:latest'
  enabled: ${{ parameters.PushTagLatest }}
  failOnStderr: true