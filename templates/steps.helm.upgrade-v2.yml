parameters:
- name: imageRepository
  type: string

steps:

- template: parameter-check-v1.yml
  parameters:
    Name: imageRepository
    Value: ${{ parameters.imageRepository }}

- task: AzureCLI@2
  displayName: az acr helm repo add -n $(AzACRName)
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: az acr helm repo add -n $(AzACRName) --verbose
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

#FYI - if the first helm install (using below update+install arg) fails, you need to run 'purge', which "Remove the release from the store and make its name free for later use"
#https://github.com/helm/helm/blob/master/docs/helm/helm_delete.md
#helm delete --purge ${{ parameters.imageRepository }}

#https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/helm-deploy?view=azure-devops#upgrade-command
- task: HelmDeploy@0
  displayName: helm upgrade $(AzACRName)/${{ parameters.imageRepository }} --install --version $(Build.BuildId) --set image.tag=$(Build.BuildNumber)
  inputs:
    azureSubscription: $(azureSubscription)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: upgrade
    #chartType: Name
    chartName: $(AzACRName)/${{ parameters.imageRepository }}
    releaseName: ${{ parameters.imageRepository }}
    #overrideValues: image.tag=$(Build.BuildNumber)
    #resetValues: true
    #force: true
    #--version $(Build.BuildId) --set image.repository=$(registryName).azurecr.io/$(projectName) --set image.tag=$(build.buildId) --set ingress.enabled=false
    #arguments: --install --force
    arguments: --install --version $(Build.BuildId) --set image.tag=$(Build.BuildNumber)
