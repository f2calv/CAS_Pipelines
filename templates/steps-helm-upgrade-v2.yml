parameters:
- name: azureSubscription
  type: string
  default: $(azureSubscription)
- name: spUsername
  type: string
  default: $(spUsername)
- name: spPassword
  type: string
  default: $(spPassword)
- name: registry
  type: string
  default: $(registry)
- name: repository
  type: string
  default: $(repository)
- name: repositoryPrefix
  type: string
  default: charts/
- name: tag
  type: string
  default: $(tag)
- name: azureResourceGroup
  type: string
  default: $(azureResourceGroup)
- name: kubernetesCluster
  type: string
  default: $(kubernetesCluster)

steps:

- task: AzureCLI@2
  displayName: helm pull+export+upgrade
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      #set-up kubectl credentials on the agent for the helm upgrade
      az aks get-credentials -n ${{ parameters.kubernetesCluster }} -g ${{ parameters.azureResourceGroup }} --overwrite-existing

      #authenticate with the registry using a service principle
      echo ${{ parameters.spPassword }} | helm registry login "${{ parameters.registry }}" --username ${{ parameters.spUsername }} --password-stdin

      #construct the chart reference
      $chartRef = "${{ parameters.registry }}/${{ parameters.repositoryPrefix }}${{ parameters.repository }}:${{ parameters.tag }}"
      Write-Host "chartRef=$chartRef"
      
      helm chart pull $chartRef

      helm chart list

      helm chart export $chartRef --destination $(Pipeline.Workspace)/install

      Write-Host "Starting upgrade..."

      $branch = git branch --show-current
      $commit = git rev-parse HEAD
      $repo = Split-Path -Leaf (git remote get-url origin)

      helm upgrade `
        --install `
        --wait `
        --version ${{ parameters.tag }} `
        --set image.tag=${{ parameters.tag }} `
        --set image.repository=${{ parameters.repository }} `
        --set image.registry=${{ parameters.registry }} `
        --set buildID=${{ parameters.tag }} `
        --set "branch=$branch" `
        --set "commit=$commit" `
        --set "repo=$repo" `
        ${{ parameters.repository }} `
        $(Pipeline.Workspace)/install/${{ parameters.repository }}
    failOnStandardError: true