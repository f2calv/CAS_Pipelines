parameters:
- name: SolutionName
  type: string
  default: ''
- name: InstallDependencies
  type: boolean
  default: false

steps:
- template: parameter-check-v1.yml
  parameters:
    Name: SolutionName
    Value: ${{ parameters.SolutionName }}

- task: DownloadPipelineArtifact@2
  displayName: 'Download Pipeline Artifact: drop'
  inputs:
    artifact: drop
    path: $(Build.ArtifactStagingDirectory)

#deprecated - now using .net core 3.1 pre-installed on self-hosted agent
#- task: UseDotNet@2
#  displayName: Use dotnet sdk 3.x
#  inputs:
#    version: 3.x
#    includePreviewVersions: true

- task: NuGetAuthenticate@0 #always run nuget auth to allow access to private azure artifact feed

#https://www.meziantou.net/computing-code-coverage-for-a-dotnet-core-project-with-azure-devops-and-coverlet.htm
- task: DotNetCoreCLI@2
  displayName: dotnet test + calculate code coverage via coverlet
  inputs:
    command: test
    #projects: **/*.Tests/*.csproj
    projects: ${{ parameters.SolutionName }}.sln
    arguments: --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[CasCap.*]*"
    #nobuild: true    #need to figure out PipelineArtifacts

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
- ${{ if eq(parameters.InstallDependencies, 'true') }}:
  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
    displayName: install dotnet-reportgenerator-globaltool
  #https://github.com/microsoft/azure-pipelines-tasks/issues/12326
  #https://github.com/microsoft/azure-pipelines-image-generation/issues/798
  - script: |
      echo "##vso[task.prependpath]$HOME/.dotnet/tools"

- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/*.Tests/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
  displayName: Create Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/CodeCoverage/